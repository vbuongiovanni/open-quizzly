{"quizName":"Design Patterns in React","quizSubject":"Programming","topics":{"0":{"topicName":"General","questions":{"0":{"questionText":"What are design patterns?","correctAnswer":"A fundamental part of software development that provide typical solutions to commonly recurring problems in software design","incorrectAnswers":["Specific pieces of software or code that should be utilized whenever possible","A block of prewritten code that is specifically designed to overcome a specific problem.","The optimized set of code to overcome a common issue."]}}},"1":{"topicName":"Singleton Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA class that is instantiated exactly one time. The single instance can then be accessed globally throughout the entire application.","correctAnswer":"Singleton Pattern","incorrectAnswers":["Proxy Pattern","Mediator / Middleware Pattern","Command Pattern"]},"1":{"questionText":"In React, what are the common use-cases for the Singleton Pattern?","correctAnswer":"It shouldn't be utilized. Instead, state management tools should be used, such as Redux or React Context.","incorrectAnswers":["Passing user authentication/credentials or dynamic CSS class names throughout an application","When creating loggers or configuration files","Validation of changes, implementation of additional formatting or notifications, or facilitating debugging."]},"2":{"questionText":"What are the two key properties of the Singleton Pattern?","correctAnswer":"It must have only one instance, and that instance must be accessible globally.","incorrectAnswers":["It must have only one instance that is instantiated at the lowest component level, and that instance must be accessible globally","It must have at least one instance that are accessible globally","It must be accessible globally and instantiated more than once"]}}},"2":{"topicName":"Proxy Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of gaining more control over the interactions of specific objects by using a handler object.","correctAnswer":"Proxy Pattern","incorrectAnswers":["Singleton Pattern","Mediator / Mediator Pattern","Factory Pattern"]},"1":{"questionText":"What use-cases for the Proxy Pattern","correctAnswer":"Validation of changes, implementation of additional formatting or notifications, or facilitating debugging.","incorrectAnswers":["Managing an applications single resource that is accessed globally","It shouldn't be utilized. Instead, state management tools should be used, such as Redux or React Context","For securing private or sensitive data, such as API keys or user information"]},"2":{"questionText":"What are the drawbacks to the Proxy Pattern?","correctAnswer":"Overusing the pattern or implementing heavy operations in it can quickly hinder the performance of the application. ","incorrectAnswers":["Writing readable code using the pattern becomes very challenging","The pattern makes it difficult to keep code 'DRY'.","Since, by definition, only a single instance exists, the object can become out of sync with the application with multiple processes are changing it at once."]}}},"3":{"topicName":"Provider Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of making data available to all, if not many, child components without prop drilling.","correctAnswer":"Provider Pattern","incorrectAnswers":["Factory Pattern","Command Pattern","Compound Pattern"]},"1":{"questionText":"What use-cases for the Provider pattern","correctAnswer":"Passing user authentication/credentials or dynamic CSS class names throughout an application","incorrectAnswers":["Handling requests from a third-party API that will be used throughout the application.","Storing the location of a user's player in a game.","Handling the inputs of a form that will then be sent to a backend server."]},"2":{"questionText":"What are the drawbacks of the Provider pattern?","correctAnswer":"Since every component that consumes context will rerender when state changes, overusing the pattern will quickly result in performance issues.","incorrectAnswers":["The values managed by this pattern can become out of sync with the application with multiple processes are changing it at once.","If you change the name of a state variable in this pattern, you will have to rename the variable in every component throughout the application.","It doesn't avoid the problems associated with prop drilling."]}}},"4":{"topicName":"Factory Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA function that returns a new object, that may or may not have attributes or functions built within it, without the use of the 'new' keyword.","correctAnswer":"Factory Pattern","incorrectAnswers":["Provider Pattern","Singleton Pattern","Proxy Pattern"]},"1":{"questionText":"In what situation should you consider the Factory Pattern","correctAnswer":"When creating multiple objects that are relatively complex configurable, but share the same properties.","incorrectAnswers":["When you need to create many objects that have the exact same properties and attributes, such as ","When you need to create a very large number of objects that have a small number of variations.","When you want to create and call the same instance of a resource."]},"2":{"questionText":"What are the key benefits of the Factory Pattern","correctAnswer":"Promotes code reusability and maintainability by allowing each object to be configured. ","incorrectAnswers":["Promotes code reusability and maintainability by allowing each instance to be configured, and it is more memory efficient than creating instances from a class constructor.","Promotes code reusability and maintainability by allowing each instance to be configured, and it is more memory efficient than creating instances from a class constructor.","It is more memory efficient than creating instances from a class constructor."]},"3":{"questionText":"Which of the following is a drawback of the Factory Pattern in React","correctAnswer":"In large applications that require many objects, a class constructor will outperform this Pattern with respect to memory efficiency.","incorrectAnswers":["The values managed by this Pattern can become out of sync with the application with multiple processes are changing it at once.","This Pattern makes it difficult to keep code 'DRY'.","This pattern is inferior to the class constructors in terms of readability, performance, and maintainability."]}}},"5":{"topicName":"Container/Presentational Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of enforcing the separation of concerns by breaking a task into two processes - one that takes care of how data is shown to the user and a second that takes care of what data is shown to users","correctAnswer":"Container/Presentational Pattern","incorrectAnswers":["Factory Pattern","Provider Pattern","Mediator / Middleware Pattern"]},"1":{"questionText":"Which of the following correctly describes how the Container/Presentational Pattern should be implemented?","correctAnswer":"The Container Component requests, collects, or processes data from an outside source, such as an external API. The processed data, required by the user, is then passed to the Presentational Component via Props. The Container component is responsible for the state and data of the application.\r\n\r\nThe Presentational Component receives the necessary data from the Container Component, then renders the data with all the necessary styling. More generally, Presentational Components are easily made to be reusable since they only display data.","incorrectAnswers":["The Presentational Component requests, collects, or processes data from an outside source, such as an external API. The processed data, required by the user, is then passed to the Container Component via Props. The Presentational component is responsible for the state and data of the application.\r\n\r\nThe Container Component receives the necessary data from the Presentational Component, then renders the data with all the necessary styling. More generally, Container Components are easily made to be reusable since they only display data.","Container components are generalized to many Presentational Components, which then render the data. The Container component is responsible for the state and data of the application. More generally, Presentational Components are easily made to be reusable since they only display data.","Container components are generalized to many Presentational Components, which then render the data. The Presentational component is responsible for the state and data of the application. More generally, Container Components are easily made to be reusable since they only display data."]},"2":{"questionText":"How should the Container/Presentation Pattern be implemented?","correctAnswer":"With the introduction of React Hooks, many of the same benefits of the Container/Presentational pattern can be achieved without creating two separate class components. Today, it makes more sense to create two functional components - one to handle the logic (along with state) and second that renders to the UI via data received through props. ","incorrectAnswers":["When there is user facing components that will be rendered, It is best practice to always use this pattern to enforce the separation of concerns","When there is user facing components that will be rendered, It is best practice to use this pattern to enforce the separation of concerns if there is complex logic or many data processing steps.","When there is user facing components that will be rendered, It is best practice to use this pattern to enforce the separation of concerns if the frontend component has many complex styling elements."]}}},"6":{"topicName":"Observer Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA 'subscription' to a specified objects, which notifies other objects when a certain event takes place","correctAnswer":"Observer Pattern","incorrectAnswers":["Provider Pattern","Proxy Pattern","Container/Presentational"]},"1":{"questionText":"What are the benefits of the Observer Pattern","correctAnswer":"Provides a means of enforcing the separation of concerns and single-responsibility principle.","incorrectAnswers":["Provides a highly performant alternative to React State.","Extremely easy and straight forward to implement in large applications","Observer objects are tightly coupled to the observable object and are permanently tied to the Observer. "]},"2":{"questionText":"When should the Observer Pattern be implemented?","correctAnswer":"When many objects or values are dependent on a single objects. For example, a custom logging.","incorrectAnswers":["When many objects or values are dependent on a single objects. For example, dynamic CSS class names that are used throughout the entire application.","When one object or value is dependent on a many other objects. For example, a custom logging.","When one object or value is dependent on a many other objects. For example, dynamic CSS class names that are used throughout the entire application."]},"3":{"questionText":"What are the drawbacks of the Observer Pattern","correctAnswer":"In large applications with complex observers, performance can suffer.","incorrectAnswers":["Doesn't allow for flexibility in what objects are subscribed to the observer.","In large applications, notifications can be missed if the observer is too complex.","All answers are correct."]}}},"7":{"topicName":"Mediator / Middleware Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA central mechanism to control all communication between components. Effectively, this converts requests of the various components from a Many-to-Many to a 'one-to-one' relationship.","correctAnswer":"Mediator (or, Middleware) Pattern","incorrectAnswers":["Proxy Pattern","Observer Pattern","Container/Presentational"]},"1":{"questionText":"What are the benefits of the Mediator (or, Middleware) Pattern?","correctAnswer":"This pattern encapsulates the communication logic between instances, thereby allowing for maintainable, generalized, and DRY code. Additionally, since instances that communicate with the Mediator are decoupled, instances can be added or removed without impacting other instances.","incorrectAnswers":["This pattern encapsulates the communication logic into each individual instance, thereby allowing for maintainable, generalized, and DRY code. Additionally, since every instance is capable of communicating directly with every other instance, any single instance can be added or removed without impacting others.","This pattern allows for decentralization of the logic, which makes it highly performant at scale.","By utilizing this pattern, the single responsibility principle is satisfied because each instance contains all the logic that it needs to communicate with other instances without the use of an external mechanism."]},"2":{"questionText":"Which of the following is a use case for the Mediator (or, Middleware) Pattern?","correctAnswer":"Chat room","incorrectAnswers":["A logger file","User Authentication functionality","Handling API requests from an external resource."]}}},"8":{"topicName":"Command Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of decoupling methods from an object or class instance by creating separate external functions.","correctAnswer":"Command Pattern","incorrectAnswers":["Provider Pattern","Proxy Pattern","Mediator / Middleware"]},"1":{"questionText":"In which of the following scenarios should you implement the command pattern?","correctAnswer":"In a situation where an object or class instance may perform one of many commands that may have a lifespan or in a scenario where the commands should be queued and prioritized or executed at specific times.","incorrectAnswers":["Anytime there are multiple instances of a similar class or object with more than one method that may need to be executed","Anytime there is a single class instance or object with more than one operation that may need to be executed.","Anytime there is a single class instance or object with more than one complex method that may need to be executed."]},"2":{"questionText":"What are the benefits of the Command Pattern?","correctAnswer":"By decoupling class instances or objects from their methods, the single responsibility principle is enforced. Additionally, new commands can be introduced without the risk of breaking existing code, thereby adhering to the Open/Close Principle.","incorrectAnswers":["By decoupling class instances or objects from their methods, the code base become significantly more DRY compared to scenarios when the Command Pattern is not implemented.","The Command Pattern enforces synchronization of data and ensures there aren't any conflicts in React state because commands are executed synchronously.","This pattern encapsulates the communication logic between different class instances or objects, thereby allowing for maintainable, generalized, and DRY code. Additionally, since instances that communicate with the command receiver are decoupled, new instances can be added or removed without impacting other instances."]}}},"9":{"topicName":"Compound Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of creating multiple components (one parent and one or more children) that differ in logic and functionality, but work together to perform a common task.","correctAnswer":"Compound Pattern","incorrectAnswers":["Proxy Pattern","Render Props Pattern","Mediator Pattern"]},"1":{"questionText":"Which of the following is a key attribute of the Compound Component pattern?","correctAnswer":"Compound Components manage their own internal state, which are shared throughout all child components.","incorrectAnswers":["One of the child components within the pattern can break without the functionality of the Compound Component breaking. ","Compound Components are always the most efficient design, in terms of performance, to implement functionality that spans across multiple components because state is stored internally.","All answers are correct."]},"2":{"questionText":"Where is the Compound Pattern often implemented?","correctAnswer":"In a component library, or a prebuilt library of existing generalized components","incorrectAnswers":["To implement sub-functionality that manages an application's entire state.","In smaller applications that doesn't require a larger or more robust state management tool.","When making many small changes across many components."]}}},"10":{"topicName":"Higher Order Component (HOC) Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of reusing the same logic in multiple components by passing a nonnamed object to a child component.","correctAnswer":"Higher Order Component (HOC)","incorrectAnswers":["Render Props Pattern","Factory Pattern","Singleton Pattern"]},"1":{"questionText":"What is a key drawback of Higher Order Component (HOC) pattern?","correctAnswer":"Since lifecycle methods cannot be added to a render prop, it can only be used on components that don't need to alter the data that it receives. Additionally, since props are explicitly named, there are potential issues of implicit props.","incorrectAnswers":["The Render Props Pattern performs significantly worse than the HOC pattern","The Higher Order Component Pattern makes it difficult to adhere to the DRY principle because you have to create multiple instances of the same component","The Higher Order Component Pattern makes it difficult to adhere to the separation of concerns principle code has to be replicated for each instance"]}}},"11":{"topicName":"Render Props Pattern","questions":{"0":{"questionText":"Which design pattern is best described as:\r\n\r\nA means of reusing the same logic in multiple components through an explicitly named prop.","correctAnswer":"Render Props Pattern","incorrectAnswers":["Higher Order Component (HOC)","Factory Pattern","Singleton Pattern"]},"1":{"questionText":"What is a key drawback of Render Props?","correctAnswer":"Since lifecycle methods cannot be added to a render prop, it can only be used on components that don't need to alter the data that it receives.","incorrectAnswers":["Naming collisions can arise from props being passed down from parent components","The Render Props Pattern performs significantly worse than the HOC pattern","The Render Props Pattern makes it difficult to adhere to the DRY principle because you have to create multiple instances of the same component"]}}}}}
